// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  birthday  DateTime
  cpf       String?  @unique
  password  String
  hashedRt  String?  @map("hashed_rt")
  status    String   @default("ACTIVE")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  campaigns DonationCampaign[]
  donations Donation[]
  comments  Comment[]

  @@map("users")
}

model DonationCampaign {
  id          String @id @default(uuid()) @db.Uuid
  title       String
  description String
  goal        Float
  moneyRaised Float  @default(0) @map("money_raised")
  status      String @default("ACTIVE")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  campaignOrganizer   User       @relation(fields: [campaignOrganizerId], references: [id])
  campaignOrganizerId String     @map("campaign_organizer_id") @db.Uuid
  donations           Donation[]
  comments            Comment[]

  @@map("donation_campaigns")
}

model Donation {
  id          String @id @default(uuid()) @db.Uuid
  moneyAmount Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  donationCampaign   DonationCampaign @relation(fields: [donationCampaignId], references: [id])
  donationCampaignId String           @map("campaign_id") @db.Uuid
  donor              User             @relation(fields: [donorId], references: [id])
  donorId            String           @map("donor_id") @db.Uuid

  @@map("donations")
}

model Comment {
  id      String @id @default(uuid()) @db.Uuid
  content String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  donationCampaign   DonationCampaign @relation(fields: [donationCampaignId], references: [id])
  donationCampaignId String           @unique @map("campaign_id") @db.Uuid
  user               User             @relation(fields: [userId], references: [id])
  userId             String           @unique @map("user_id") @db.Uuid

  @@map("comments")
}
